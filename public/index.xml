<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>augenye&#39;s blog</title>
        <link>https://www.augenye.cn/</link>
        <description>Recent content on augenye&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 05 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.augenye.cn/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>服务归因[ACE]</title>
        <link>https://www.augenye.cn/p/%E6%9C%8D%E5%8A%A1%E5%BD%92%E5%9B%A0ace/</link>
        <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>https://www.augenye.cn/p/%E6%9C%8D%E5%8A%A1%E5%BD%92%E5%9B%A0ace/</guid>
        <description>&lt;p&gt;参考天猫服务归因，此框架的大部分概念来自于下面的文章，自行实现框架的思路也与之一致。&lt;!-- raw HTML omitted --&gt;用下文的话来说，此框架主要是对以下内容的思考：&lt;!-- raw HTML omitted --&gt;对“属性-分类-执行”问题的产品化思考与实践上的实践。&lt;!-- raw HTML omitted --&gt;解决了属性分类的通用性问题，具有良好的扩展性和代码语义&lt;/p&gt;
&lt;h2 id=&#34;组件&#34;&gt;组件&lt;/h2&gt;
&lt;p&gt;使用ACE需要了解的组件，通过这些组件搭配使用，才能使用好这个框架，解决复杂业务逻辑问题。&lt;/p&gt;
&lt;h3 id=&#34;executor执行器&#34;&gt;Executor（执行器）&lt;/h3&gt;
&lt;p&gt;执行器，顾名思义，是在业务语义匹配后执行的一组逻辑。&lt;!-- raw HTML omitted --&gt;执行器被归因器所绑定，可以被多个归因器绑定， 能够进行复用，但是这个复用的粒度需要开发者自行考量&lt;!-- raw HTML omitted --&gt;eg: 定义一个发送微信消息的执行器，它将会发送微信消息，定义有三个要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承 &lt;code&gt;IExecutor&lt;/code&gt;接口&lt;/li&gt;
&lt;li&gt;注解定义执行器信息，必填的为 &lt;code&gt;name&lt;/code&gt;，后续归因器绑定的执行器，也是基于此名称&lt;/li&gt;
&lt;li&gt;实现&lt;code&gt;execute&lt;/code&gt;方法，执行这个执行器专属的业务功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://img.augenye.cn/images/20221006/7e7b56184cc34805a32477320bc57632.png?imageView2/0/interlace/1/q/100%7cimageslim&#34; alt=&#34;执行器&#34;  /&gt;
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;attributor属性校验器&#34;&gt;Attributor（属性校验器）&lt;/h3&gt;
&lt;p&gt;属性校验器，&lt;strong&gt;针对一个属性进行&lt;/strong&gt;校验，针对一个属性可以用不同的处理规则。&lt;!-- raw HTML omitted --&gt;可以通过内置的注解&lt;code&gt;RulerMethod&lt;/code&gt;定义一个此属性的校验方法，这是一个模板方法&lt;!-- raw HTML omitted --&gt;需要开发者去定义好，此方法接受两个参数 &lt;code&gt;AceContext 和 fieldName&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AceContext：归因上下文，整个归因需要用到的信息都在这个对象里&lt;/li&gt;
&lt;li&gt;fieldName：此校验器校验的字段名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg: 定一个平台属性的校验器，当平台有很多，如微信，抖音，微博等等，现在需要对平台这个属性进行校验，这时候由于我们是需要判断平台的类型，所以我们定一个判断类型是否匹配的校验方法&lt;!-- raw HTML omitted --&gt;定义这一类校验器有以下步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现 &lt;code&gt;IAttributor&lt;/code&gt;接口&lt;/li&gt;
&lt;li&gt;注解定义属性校验器的信息，这个是归因器绑定的属性校验器&lt;/li&gt;
&lt;li&gt;定义这个属性自己的校验方法，可以有多个，&lt;strong&gt;但是入参固定&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://img.augenye.cn/images/20221006/8b9ef4e606684c67a3f705a1ae6ca462.png?imageView2/0/interlace/1/q/100%7cimageslim&#34; alt=&#34;属性校验器&#34;  /&gt;
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;classifier归因器&#34;&gt;Classifier（归因器）&lt;/h3&gt;
&lt;p&gt;归因器，针对一组属性规则进行校验，满足条件则会执行绑定的执行器。&lt;!-- raw HTML omitted --&gt;所以定义一个归因器，它有以下的要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现 &lt;code&gt;IClassifier&lt;/code&gt;接口，无需实现内置方法，已有默认执行逻辑，除非你需要自定义自己的归因流程&lt;/li&gt;
&lt;li&gt;注解定义归因器的信息
&lt;ul&gt;
&lt;li&gt;归因器名称：用于场景绑定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matcher&lt;/code&gt;：任意Matcher绑定的&lt;strong&gt;属性校验无效（false），则该归因无效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;：任意Matcher绑定的&lt;strong&gt;属性校验有效（true），则该归因无效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;executor&lt;/code&gt;：场景绑定的执行器，执行一组业务逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg: 发送微信消息的归因器，当 &lt;code&gt;platform&lt;/code&gt;为&lt;code&gt;wechat&lt;/code&gt;的时候，执行发送微信消息&lt;!-- raw HTML omitted --&gt;&lt;img src=&#34;http://img.augenye.cn/images/20221006/92057fa2a8cc43709e08b35e5acbe5b9.png?imageView2/0/interlace/1/q/100%7cimageslim&#34; alt=&#34;归因器1&#34;  /&gt;&lt;!-- raw HTML omitted --&gt;eg: 抖音平台的发送消息逻辑也大同消息，唯一的不同是属性校验方法的值不同和关联的执行器不同&lt;!-- raw HTML omitted --&gt;&lt;img src=&#34;http://img.augenye.cn/images/20221006/d6a79c50aad34a4f8944c8b6b58b7b85.png?imageView2/0/interlace/1/q/100%7cimageslim&#34; alt=&#34;归因器2&#34;  /&gt;
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;scene归因场景&#34;&gt;Scene（归因场景）&lt;/h3&gt;
&lt;p&gt;归因场景，绑定一组归因器，场景主要是聚合一组业务逻辑，代表一组归因器属于一个场景，场景有两种执行模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SINGLE: &lt;strong&gt;单次匹配&lt;/strong&gt;，任意一个归因器执行成功，此场景成功，执行对应的场景执行器，停止后续场景匹配，&lt;strong&gt;仅所有归因无效，该场景无效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;MULTI：&lt;strong&gt;多次匹配&lt;/strong&gt;，任意一个归因器执行成功，此场景成功，执行对应的归因器绑定的执行器，继续对后续场景进行匹配，若有匹配中，则也执行对应的执行器，&lt;strong&gt;仅所有归因无效，该场景无效&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义一个场景的逻辑很简单，它和归因器一样，无需实现对应的方法，场景已有内置逻辑，仅在需要扩展自己的场景逻辑的时候，重写该方法。虾&lt;!-- raw HTML omitted --&gt;定义场景步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现 &lt;code&gt;IScene&lt;/code&gt;接口&lt;/li&gt;
&lt;li&gt;注解定义场景信息
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;classifier&lt;/code&gt;：归因器列表，用上述定义的长巾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;schema&lt;/code&gt;：执行模式，如上所描述，SINGLE为默认模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg：发送消息，根据平台类型归因，匹配后执行对应的发送消息逻辑&lt;!-- raw HTML omitted --&gt;&lt;img src=&#34;http://img.augenye.cn/images/20221006/a8eb0d5ad48d4b3e89ae535506fed747.png?imageView2/0/interlace/1/q/100%7cimageslim&#34; alt=&#34;归因场景&#34;  /&gt;
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;aceworker场景归因执行&#34;&gt;AceWorker（场景归因执行）&lt;/h3&gt;
&lt;p&gt;上面都定义好了，该如何使用呢，这就需要使用的AceWorker#process，具体使用用例如下，他就会针对上述进行归因，匹配后执行&lt;!-- raw HTML omitted --&gt;
&lt;img src=&#34;http://img.augenye.cn/images/20221006/bf77b56170724deda057b0106761a5bf.png?imageView2/0/interlace/1/q/100%7cimageslim&#34; alt=&#34;aceWorker&#34;  /&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;img src=&#34;http://img.augenye.cn/images/20221006/62ccdf67efe749b2801b5cde044b7751.png?imageView2/0/interlace/1/q/100%7cimageslim&#34; alt=&#34;aceworker1&#34;  /&gt;
&lt;!-- raw HTML omitted --&gt;修改 platform 的值为 douyin , 根据归因的规则，可以知道，将会执行抖音消息的执行器&lt;!-- raw HTML omitted --&gt;&lt;img src=&#34;http://img.augenye.cn/images/20221006/43e82f42749a4395b8a29632790cdc13.png?imageView2/0/interlace/1/q/100%7cimageslim&#34; alt=&#34;aceworker4&#34;  /&gt;
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;p&gt;还有其他内置的工具类，后续介绍
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;引入依赖&#34;&gt;引入依赖&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.augenye.ace&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;universe-ace&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;开启ace配置&#34;&gt;开启ace配置&lt;/h3&gt;
&lt;p&gt;集成了自动状态，springboot项目直接使用参数装配开启ACE&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;ace.switch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>DDD - Domain Primitive</title>
        <link>https://www.augenye.cn/p/ddd-domain-primitive/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.augenye.cn/p/ddd-domain-primitive/</guid>
        <description>&lt;h2 id=&#34;domain-primitive&#34;&gt;Domain Primitive&lt;/h2&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/716908?spm=a2c6h.14164896.0.0.1387603dS7AzNu&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.aliyun.com/article/716908?spm=a2c6h.14164896.0.0.1387603dS7AzNu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6844904177207001101&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6844904177207001101&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;应用架构&#34;&gt;应用架构&lt;/h2&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/719251&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.aliyun.com/article/719251&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6912228908075057166&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6912228908075057166&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;repository&#34;&gt;Repository&lt;/h2&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/758292&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.aliyun.com/article/758292&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6845166890554228744&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6845166890554228744&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;领域层设计规范&#34;&gt;领域层设计规范&lt;/h2&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/784117?spm=a2c6h.12873639.0.0.23c344e7KWlCOb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.aliyun.com/article/784117?spm=a2c6h.12873639.0.0.23c344e7KWlCOb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6912228908075057166&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6912228908075057166&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;避免流水账&#34;&gt;避免流水账&lt;/h2&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/783664?spm=a2c6h.12873639.0.0.1d0c2cf1JlpmgQ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.aliyun.com/article/783664?spm=a2c6h.12873639.0.0.1d0c2cf1JlpmgQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Link: &lt;a class=&#34;link&#34; href=&#34;https://juejin.cn/post/6953141151931039758&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juejin.cn/post/6953141151931039758&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>多线程基础知识</title>
        <link>https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
        <description>&lt;h2 id=&#34;基础概念&#34;&gt;基础概念&lt;/h2&gt;
&lt;h3 id=&#34;进程和线程&#34;&gt;进程和线程&lt;/h3&gt;
&lt;p&gt;是为了&lt;strong&gt;解决资源分配&lt;/strong&gt;的问题,计算资源（CPU），进程（内存），进程（文件），进程会拥有除了计算资源之外的所有资源。虽然操作系统里说：进程是计算机资源分配的最小单位。但是现在已经不太对了，计算资源现在不分配给进程，而是直接分配给线程资源，因为现在进程哪不同任务需要分时，进程创建时就创建主线程，创建线程需要（1. 一段程序 2. 入口指令的内存地址），线程共享进程的内存，但是这是受限于程序语言，操作系统并为对此做限制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程：线程的容器，系统资源会分配给进程，是程序的执行副本，例如多个APP，启动多个服务就是启动了多个线程。&lt;/li&gt;
&lt;li&gt;线程：被称为轻量级的进程，在linux中线程的别名就叫做LWP（light-weight-process）。
&lt;ul&gt;
&lt;li&gt;线程是执行单位，线程不拥有资源，线程计算资源，那为什么threadloca看起来又是线程资源呢，threadlocal是进程给所有线程看到的共享资源空间，获取的时候会以当前线程为key查询相应的的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用户级线程：进程在创建的时候会创建主线程，系统资源是分配给进程的，如果都是用户级线程，那么他们共享的是主线的时间片或资源。系统调度资源只涉及到了进程。&lt;/p&gt;
&lt;p&gt;内核级线程：线程分配在内核态，由系统来进行调度。&lt;/p&gt;
&lt;h3 id=&#34;上下文切换&#34;&gt;上下文切换&lt;/h3&gt;
&lt;p&gt;任务执行一个时间片后会切换到下一个任务。但是在切换之前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。&lt;/p&gt;
&lt;p&gt;如何减少上下问切换？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无锁并发编程，多线程竞争锁会引起上下文切换，所以多线程处理数据，可以用一些，方法来避免使用锁，例如，将数据的ID按照hash算法取模，不同的线程处理不同段的数据。&lt;/li&gt;
&lt;li&gt;CAS算法：compare  and swap，比较再赋值
&lt;ol&gt;
&lt;li&gt;ABA：版本号解决，时间戳解决&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用最少线程，避免创建不必要的线程，例如使用线程池。&lt;/li&gt;
&lt;li&gt;协程，单线程里实现多任务调度，并在单线程里维持多个任务的切换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;死锁资源冲突造成的互相等待&#34;&gt;死锁：资源冲突造成的互相等待&lt;/h3&gt;
&lt;p&gt;如何避免死锁：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免一个线程同时获取多个锁&lt;/li&gt;
&lt;li&gt;避免一个线程在锁内占用多个资源，尽量保证每个锁只获取一个资源&lt;/li&gt;
&lt;li&gt;尝试使用定时锁，自动释放&lt;/li&gt;
&lt;li&gt;对于数据锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;同步执行同步数据同步&#34;&gt;同步：执行同步，数据同步&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;执行同步：多个参与方，多个线程，互相等待执行后续操作&lt;/li&gt;
&lt;li&gt;数据同步：缓存和存储之间的同步，不同机房数据库的同步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;monitor的实现&#34;&gt;monitor的实现&lt;/h3&gt;
&lt;p&gt;每一个对象都关联一个monitor，解决了每一个对象都可以上锁，不用再定义锁变量，线程抢占锁，就是抢占monitor，monitor内部实现等待集合，没有竞争到锁的线程梓萱失败后，会在等待集合中休眠&lt;/p&gt;
&lt;p&gt;能力汇总：JVM的monitor指令&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;monitorenter：获取锁，成功进入临界区，失败：自旋-&amp;gt;休眠-&amp;gt;waitset&lt;/li&gt;
&lt;li&gt;临界区&lt;/li&gt;
&lt;li&gt;monitorexit：唤醒&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;volatile&#34;&gt;volatile&lt;/h3&gt;
&lt;p&gt;volatile的实现原则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lock前缀指令会引起处理器缓存写回到内存当中&lt;/li&gt;
&lt;li&gt;一个处理器缓存回到内存会导致其他处理器的缓存无效（缓存一致性协议）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;synchronized&#34;&gt;Synchronized&lt;/h3&gt;
&lt;p&gt;synchronized的表现形式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于普通同步方法，锁的是当前实例的对象&lt;/li&gt;
&lt;li&gt;对于静态同步方法，锁事当前类的class对象&lt;/li&gt;
&lt;li&gt;对于同步方法块，锁事Synchronized括号里配置的对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;锁升级&#34;&gt;锁升级&lt;/h4&gt;
&lt;p&gt;为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;偏向锁：大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了获取锁的代价更低从而引入了偏向锁，当一个线程进入同步代码块并获取锁的时候，会在对象头和栈帧中的锁记录里存储偏向锁的线程ID、以后该线程进入代码块的时候不需要再次竞争，而是判断mark_word里标注的偏向锁id是否指向当前线程，如果不是，则再看一下当前mark_work，判断一下当前是否为偏向锁，如果未设置，则使用CAS竞争锁，如果设置了，则尝试使用CAS将当前对象头的偏向锁指向当前线程。解锁：出现竞争就会出现释放锁&lt;/li&gt;
&lt;li&gt;自旋锁：偏向锁竞争失败，升级为自旋锁，尝试自旋获取锁，&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;线程状态&#34;&gt;线程状态&lt;/h2&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 94; flex-basis: 227px&#34;&gt;
		&lt;a href=&#34;https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/thread-status.png&#34; data-size=&#34;1188x1252&#34;&gt;&lt;img src=&#34;https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/thread-status.png&#34;
				srcset=&#34;https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/thread-status_huffe8d02773e9f87c4456e1afb21ef1dd_460403_480x0_resize_box_3.png 480w, https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/thread-status_huffe8d02773e9f87c4456e1afb21ef1dd_460403_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1188&#34;
				height=&#34;1252&#34;
				loading=&#34;lazy&#34;
				alt=&#34;线程状态&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;线程状态&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;线程中断&#34;&gt;线程中断&lt;/h2&gt;
&lt;h3 id=&#34;park--unpark&#34;&gt;Park &amp;amp; UnPark🤨&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Park&lt;/code&gt;暂停当前线程，&lt;code&gt;UnPark&lt;/code&gt;恢复某个线程的执行，可以指定线程暂停和恢复。&lt;/p&gt;
&lt;p&gt;它们与&lt;code&gt;wait和notify&lt;/code&gt;不同的是，前者需要配合&lt;code&gt;Object Monitor&lt;/code&gt;使用，而&lt;code&gt;unpark&lt;/code&gt;不必&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wait &amp;amp; notify &amp;amp; notifyAll&lt;/code&gt;使用必须先拥有&lt;code&gt;monitor&lt;/code&gt;，属于&lt;code&gt;Object&lt;/code&gt;类&lt;/p&gt;
&lt;h3 id=&#34;如何停止线程&#34;&gt;如何停止线程😫&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;interrupt&lt;/code&gt;来请求，停止线程，需要请求方和被停止方，子方法被调用方相互配合，中断检查再执行。&lt;code&gt;stop&lt;/code&gt;和&lt;code&gt;suspend&lt;/code&gt;已废弃，&lt;code&gt;volatile&lt;/code&gt;不适合用来做中断控制，无法处理长时间阻塞&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为被停止方：每次循环中或者适时检查中断信号，并且在可能抛出InterrupedException的地方处理该中断信号；&lt;/li&gt;
&lt;li&gt;请求方：发出中断信号；&lt;/li&gt;
&lt;li&gt;子方法调用方（被线程调用的方法的作者）要注意：优先在方法层面抛出InterrupedException，或者检查到中断信号时，再次设置中断状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用volatile设置boolean标记位有什么问题&#34;&gt;用volatile设置boolean标记位有什么问题🧐&lt;/h3&gt;
&lt;p&gt;首先，这种做法是错误的，在某些情况下虽然可用，但是在一些情况下会存在严重问题。&lt;/p&gt;
&lt;p&gt;如果我们遇到了线程长时间阻塞，例如生产者消费者模型中，就没办法及时唤醒它，或者永远都无法唤醒该线程，从而无法及时运行到&lt;code&gt;volatile&lt;/code&gt;设置的标记位，中断就无法实现，&lt;code&gt;interrupt&lt;/code&gt;设计之初就是把wait等长期阻塞作为一种特殊情况考虑在内了，所以应该使用&lt;code&gt;interrupt&lt;/code&gt;来中断线程。&lt;/p&gt;
&lt;h3 id=&#34;如何处理不可中断的阻塞&#34;&gt;如何处理不可中断的阻塞😖&lt;/h3&gt;
&lt;p&gt;如果线程阻塞是由于调用了&lt;code&gt;wait&lt;/code&gt;，&lt;code&gt;sleep&lt;/code&gt; 或 &lt;code&gt;join&lt;/code&gt;方法，你可以中断线程，通过抛出 &lt;code&gt;InterruptedException&lt;/code&gt; 异常来唤醒该线程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Socket I/O&lt;/code&gt;和&lt;code&gt;Reentrantlock&lt;/code&gt;等无法使用&lt;code&gt;interrupt&lt;/code&gt;响应中断，只有利用他们的特性去响应中断。例如&lt;code&gt;Reentrantlock&lt;/code&gt;使用它提供的&lt;code&gt;lockInterruptibly&lt;/code&gt; ，&lt;code&gt;Socket&lt;/code&gt;使线程立刻返回等方法达到目的。&lt;/p&gt;
&lt;h3 id=&#34;wait原理&#34;&gt;Wait原理&lt;/h3&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 107; flex-basis: 258px&#34;&gt;
		&lt;a href=&#34;https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wait.png&#34; data-size=&#34;1008x936&#34;&gt;&lt;img src=&#34;https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wait.png&#34;
				srcset=&#34;https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wait_hucbf97551630b2eea3632516aec975d40_440101_480x0_resize_box_3.png 480w, https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/wait_hucbf97551630b2eea3632516aec975d40_440101_1024x0_resize_box_3.png 1024w&#34;
				width=&#34;1008&#34;
				height=&#34;936&#34;
				loading=&#34;lazy&#34;
				alt=&#34;wait原理&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;wait原理&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;线程安全&#34;&gt;线程安全&lt;/h3&gt;
&lt;p&gt;多个线程访问一个对象，不需要考虑线程调度，也不需要进行额外的同步操作，总能获取正确的结果，那么这个对象是线程安全的（多线程情况下，不需要进行同步加锁操作就可以获取正确的执行结果，就是线程安全）&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
