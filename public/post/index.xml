<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on augenye&#39;s blog</title>
    <link>https://www.augenye.cn/post/</link>
    <description>Recent content in Posts on augenye&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 05 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.augenye.cn/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>服务归因[ACE]</title>
      <link>https://www.augenye.cn/p/%E6%9C%8D%E5%8A%A1%E5%BD%92%E5%9B%A0ace/</link>
      <pubDate>Wed, 05 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.augenye.cn/p/%E6%9C%8D%E5%8A%A1%E5%BD%92%E5%9B%A0ace/</guid>
      <description>参考天猫服务归因，此框架的大部分概念来自于下面的文章，自行实现框架的思路也与之一致。用下文的话来说，此框架主要是对以下内容的思考：对“属性-分类-执行”问题的产品化思考与实践上的实践。解决了属性分类的通用性问题，具有良好的扩展性和代码语义
组件 使用ACE需要了解的组件，通过这些组件搭配使用，才能使用好这个框架，解决复杂业务逻辑问题。
Executor（执行器） 执行器，顾名思义，是在业务语义匹配后执行的一组逻辑。执行器被归因器所绑定，可以被多个归因器绑定， 能够进行复用，但是这个复用的粒度需要开发者自行考量eg: 定义一个发送微信消息的执行器，它将会发送微信消息，定义有三个要素
继承 IExecutor接口 注解定义执行器信息，必填的为 name，后续归因器绑定的执行器，也是基于此名称 实现execute方法，执行这个执行器专属的业务功能 Attributor（属性校验器） 属性校验器，针对一个属性进行校验，针对一个属性可以用不同的处理规则。可以通过内置的注解RulerMethod定义一个此属性的校验方法，这是一个模板方法需要开发者去定义好，此方法接受两个参数 AceContext 和 fieldName
AceContext：归因上下文，整个归因需要用到的信息都在这个对象里 fieldName：此校验器校验的字段名称 eg: 定一个平台属性的校验器，当平台有很多，如微信，抖音，微博等等，现在需要对平台这个属性进行校验，这时候由于我们是需要判断平台的类型，所以我们定一个判断类型是否匹配的校验方法定义这一类校验器有以下步骤
实现 IAttributor接口 注解定义属性校验器的信息，这个是归因器绑定的属性校验器 定义这个属性自己的校验方法，可以有多个，但是入参固定 Classifier（归因器） 归因器，针对一组属性规则进行校验，满足条件则会执行绑定的执行器。所以定义一个归因器，它有以下的要素
实现 IClassifier接口，无需实现内置方法，已有默认执行逻辑，除非你需要自定义自己的归因流程 注解定义归因器的信息 归因器名称：用于场景绑定 matcher：任意Matcher绑定的属性校验无效（false），则该归因无效 filter：任意Matcher绑定的属性校验有效（true），则该归因无效 executor：场景绑定的执行器，执行一组业务逻辑 eg: 发送微信消息的归因器，当 platform为wechat的时候，执行发送微信消息eg: 抖音平台的发送消息逻辑也大同消息，唯一的不同是属性校验方法的值不同和关联的执行器不同 Scene（归因场景） 归因场景，绑定一组归因器，场景主要是聚合一组业务逻辑，代表一组归因器属于一个场景，场景有两种执行模式
SINGLE: 单次匹配，任意一个归因器执行成功，此场景成功，执行对应的场景执行器，停止后续场景匹配，仅所有归因无效，该场景无效 MULTI：多次匹配，任意一个归因器执行成功，此场景成功，执行对应的归因器绑定的执行器，继续对后续场景进行匹配，若有匹配中，则也执行对应的执行器，仅所有归因无效，该场景无效 定义一个场景的逻辑很简单，它和归因器一样，无需实现对应的方法，场景已有内置逻辑，仅在需要扩展自己的场景逻辑的时候，重写该方法。虾定义场景步骤如下：
实现 IScene接口 注解定义场景信息 classifier：归因器列表，用上述定义的长巾 schema：执行模式，如上所描述，SINGLE为默认模式 eg：发送消息，根据平台类型归因，匹配后执行对应的发送消息逻辑 AceWorker（场景归因执行） 上面都定义好了，该如何使用呢，这就需要使用的AceWorker#process，具体使用用例如下，他就会针对上述进行归因，匹配后执行 修改 platform 的值为 douyin , 根据归因的规则，可以知道，将会执行抖音消息的执行器 其他 还有其他内置的工具类，后续介绍 使用 引入依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.augenye.ace&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;universe-ace&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 开启ace配置 集成了自动状态，springboot项目直接使用参数装配开启ACE
ace.switch=true </description>
    </item>
    
    <item>
      <title>DDD - Domain Primitive</title>
      <link>https://www.augenye.cn/p/ddd-domain-primitive/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.augenye.cn/p/ddd-domain-primitive/</guid>
      <description>Domain Primitive Link: https://developer.aliyun.com/article/716908?spm=a2c6h.14164896.0.0.1387603dS7AzNu
Link: https://juejin.cn/post/6844904177207001101
应用架构 Link: https://developer.aliyun.com/article/719251
Link: https://juejin.cn/post/6912228908075057166
Repository Link: https://developer.aliyun.com/article/758292
Link: https://juejin.cn/post/6845166890554228744
领域层设计规范 Link: https://developer.aliyun.com/article/784117?spm=a2c6h.12873639.0.0.23c344e7KWlCOb
Link: https://juejin.cn/post/6912228908075057166
避免流水账 Link: https://developer.aliyun.com/article/783664?spm=a2c6h.12873639.0.0.1d0c2cf1JlpmgQ
Link: https://juejin.cn/post/6953141151931039758</description>
    </item>
    
    <item>
      <title>多线程基础知识</title>
      <link>https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.augenye.cn/p/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>基础概念 进程和线程 是为了解决资源分配的问题,计算资源（CPU），进程（内存），进程（文件），进程会拥有除了计算资源之外的所有资源。虽然操作系统里说：进程是计算机资源分配的最小单位。但是现在已经不太对了，计算资源现在不分配给进程，而是直接分配给线程资源，因为现在进程哪不同任务需要分时，进程创建时就创建主线程，创建线程需要（1. 一段程序 2. 入口指令的内存地址），线程共享进程的内存，但是这是受限于程序语言，操作系统并为对此做限制。
进程：线程的容器，系统资源会分配给进程，是程序的执行副本，例如多个APP，启动多个服务就是启动了多个线程。 线程：被称为轻量级的进程，在linux中线程的别名就叫做LWP（light-weight-process）。 线程是执行单位，线程不拥有资源，线程计算资源，那为什么threadloca看起来又是线程资源呢，threadlocal是进程给所有线程看到的共享资源空间，获取的时候会以当前线程为key查询相应的的资源 用户级线程：进程在创建的时候会创建主线程，系统资源是分配给进程的，如果都是用户级线程，那么他们共享的是主线的时间片或资源。系统调度资源只涉及到了进程。
内核级线程：线程分配在内核态，由系统来进行调度。
上下文切换 任务执行一个时间片后会切换到下一个任务。但是在切换之前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。
如何减少上下问切换？
无锁并发编程，多线程竞争锁会引起上下文切换，所以多线程处理数据，可以用一些，方法来避免使用锁，例如，将数据的ID按照hash算法取模，不同的线程处理不同段的数据。 CAS算法：compare and swap，比较再赋值 ABA：版本号解决，时间戳解决 使用最少线程，避免创建不必要的线程，例如使用线程池。 协程，单线程里实现多任务调度，并在单线程里维持多个任务的切换。 死锁：资源冲突造成的互相等待 如何避免死锁：
避免一个线程同时获取多个锁 避免一个线程在锁内占用多个资源，尽量保证每个锁只获取一个资源 尝试使用定时锁，自动释放 对于数据锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况 同步：执行同步，数据同步 执行同步：多个参与方，多个线程，互相等待执行后续操作 数据同步：缓存和存储之间的同步，不同机房数据库的同步 monitor的实现 每一个对象都关联一个monitor，解决了每一个对象都可以上锁，不用再定义锁变量，线程抢占锁，就是抢占monitor，monitor内部实现等待集合，没有竞争到锁的线程梓萱失败后，会在等待集合中休眠
能力汇总：JVM的monitor指令
monitorenter：获取锁，成功进入临界区，失败：自旋-&amp;gt;休眠-&amp;gt;waitset 临界区 monitorexit：唤醒 volatile volatile的实现原则
Lock前缀指令会引起处理器缓存写回到内存当中 一个处理器缓存回到内存会导致其他处理器的缓存无效（缓存一致性协议） Synchronized synchronized的表现形式
对于普通同步方法，锁的是当前实例的对象 对于静态同步方法，锁事当前类的class对象 对于同步方法块，锁事Synchronized括号里配置的对象 锁升级 为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁，以及锁的存储结构和升级过程
偏向锁：大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了获取锁的代价更低从而引入了偏向锁，当一个线程进入同步代码块并获取锁的时候，会在对象头和栈帧中的锁记录里存储偏向锁的线程ID、以后该线程进入代码块的时候不需要再次竞争，而是判断mark_word里标注的偏向锁id是否指向当前线程，如果不是，则再看一下当前mark_work，判断一下当前是否为偏向锁，如果未设置，则使用CAS竞争锁，如果设置了，则尝试使用CAS将当前对象头的偏向锁指向当前线程。解锁：出现竞争就会出现释放锁 自旋锁：偏向锁竞争失败，升级为自旋锁，尝试自旋获取锁， 线程状态 线程状态 线程中断 Park &amp;amp; UnPark🤨 Park暂停当前线程，UnPark恢复某个线程的执行，可以指定线程暂停和恢复。
它们与wait和notify不同的是，前者需要配合Object Monitor使用，而unpark不必
wait &amp;amp; notify &amp;amp; notifyAll使用必须先拥有monitor，属于Object类
如何停止线程😫 使用interrupt来请求，停止线程，需要请求方和被停止方，子方法被调用方相互配合，中断检查再执行。stop和suspend已废弃，volatile不适合用来做中断控制，无法处理长时间阻塞
作为被停止方：每次循环中或者适时检查中断信号，并且在可能抛出InterrupedException的地方处理该中断信号； 请求方：发出中断信号； 子方法调用方（被线程调用的方法的作者）要注意：优先在方法层面抛出InterrupedException，或者检查到中断信号时，再次设置中断状态 用volatile设置boolean标记位有什么问题🧐 首先，这种做法是错误的，在某些情况下虽然可用，但是在一些情况下会存在严重问题。</description>
    </item>
    
  </channel>
</rss>
